 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/app/merchant/dashboard/page.tsx b/app/merchant/dashboard/page.tsx
index 8938be4f01f87e1da821d0f2a790e30e3b426fdb..21bb97389a5300051199c4eb7fe57ae72b560010 100644
--- a/app/merchant/dashboard/page.tsx
+++ b/app/merchant/dashboard/page.tsx
@@ -1,44 +1,45 @@
 'use client';
 
-import React, { useState, useEffect } from 'react';
+import React, { useState, useEffect, useCallback } from 'react';
 import { useRouter } from 'next/navigation';
 import {
   DollarSign,
   CreditCard,
   LinkIcon,
   Plus,
   Calendar,
   Clock,
   CheckCircle
 } from 'lucide-react';
 import { Button } from '@/app/components/ui/button';
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/app/components/ui/card';
 import { DashboardLayout } from '@/app/components/layout/dashboard-layout';
 import { CryptoIcon } from '@/app/components/ui/crypto-icon';
 import { supabase } from '@/lib/supabase-browser';
 import Link from 'next/link';
+import { Alert, AlertDescription } from '@/app/components/ui/alert';
 
 // Stable coin associations for automatic inclusion
 const stableCoinAssociations: Record<string, string[]> = {
   SOL: ['USDCSOL', 'USDTSOL'],
   ETH: ['USDT', 'USDC', 'DAI', 'PYUSD', 'ETHBASE', 'USDCBASE'],
   BNB: ['USDTBSC', 'USDCBSC'],
   MATIC: ['USDTMATIC', 'USDCMATIC'],
   TRX: ['USDTTRC20'],
   TON: ['USDTTON'],
   ARB: ['USDTARB', 'USDCARB'],
   OP: ['USDTOP', 'USDCOP'],
   ETHBASE: ['USDCBASE'],
   ALGO: ['USDCALGO'],
 };
 
 const CURRENCY_NAMES: Record<string, string> = {
   BTC: 'Bitcoin',
   ETH: 'Ethereum',
   BNB: 'BNB',
   SOL: 'Solana',
   TRX: 'TRON',
   TON: 'Toncoin',
   AVAX: 'Avalanche',
   DOGE: 'Dogecoin',
   XRP: 'XRP',
diff --git a/app/merchant/dashboard/page.tsx b/app/merchant/dashboard/page.tsx
index 8938be4f01f87e1da821d0f2a790e30e3b426fdb..21bb97389a5300051199c4eb7fe57ae72b560010 100644
--- a/app/merchant/dashboard/page.tsx
+++ b/app/merchant/dashboard/page.tsx
@@ -65,95 +66,140 @@ const CURRENCY_NAMES: Record<string, string> = {
   USDTTRC20: 'Tether (Tron)',
   USDTTON: 'Tether (TON)',
   USDTARB: 'Tether (Arbitrum)',
   USDCARB: 'USD Coin (Arbitrum)',
   USDTOP: 'Tether (Optimism)',
   USDCOP: 'USD Coin (Optimism)',
   USDCBASE: 'USD Coin (Base)',
   USDCALGO: 'USD Coin (Algorand)',
 };
 
 interface RecentTransaction {
   id: string;
   amount: number;
   currency: string;
   created_at: string;
 }
 
 export default function MerchantDashboard() {
   const [user, setUser] = useState<{ email?: string; user_metadata?: { business_name?: string; trial_end?: string } } | null>(null);
   const [loading, setLoading] = useState(true);
   const [merchant, setMerchant] = useState<{ id: string; wallets: Record<string, string>; trial_end?: string } | null>(null);
   const [stats, setStats] = useState({ totalRevenue: 0, paymentLinks: 0, successfulPayments: 0 });
   const [supportedCurrencies, setSupportedCurrencies] = useState<{ symbol: string; name: string }[]>([]);
   const [recentTransactions, setRecentTransactions] = useState<RecentTransaction[]>([]);
   const [trialCountdown, setTrialCountdown] = useState('');
+  const [newPayments, setNewPayments] = useState<RecentTransaction[]>([]);
   const router = useRouter();
 
   const formatCurrency = (amount: number, currency: string) => {
     try {
       return new Intl.NumberFormat('en-US', {
         style: 'currency',
         currency: currency.toUpperCase(),
       }).format(amount);
     } catch {
       return amount.toFixed(2);
     }
   };
 
-  const fetchStats = async (merchantId: string) => {
+  const fetchNewPayments = useCallback(async (merchantId: string) => {
     try {
-      const { count: linksCount } = await supabase
-        .from('payment_links')
-        .select('id', { count: 'exact', head: true })
-        .eq('merchant_id', merchantId);
+      const { data: settings } = await supabase
+        .from('merchant_settings')
+        .select('last_seen_payments_at')
+        .eq('merchant_id', merchantId)
+        .single();
+
+      const lastSeen = settings?.last_seen_payments_at || '1970-01-01';
 
-      const { data: transactions, count: paymentsCount } = await supabase
+      const { data: txs } = await supabase
         .from('transactions')
-        .select('id, amount, currency, created_at', { count: 'exact' })
+        .select('id, amount, currency, created_at')
         .eq('merchant_id', merchantId)
-        .in('status', ['confirmed', 'finished'])
+        .eq('status', 'confirmed')
+        .gt('created_at', lastSeen)
         .order('created_at', { ascending: false });
 
-      const totalRevenue = transactions?.reduce((sum, t) => sum + Number(t.amount || 0), 0) || 0;
+      setNewPayments(txs || []);
+    } catch (err) {
+      console.error('Failed to fetch new payments:', err);
+    }
+  }, []);
 
-      setStats({
-        totalRevenue,
-        paymentLinks: linksCount || 0,
-        successfulPayments: paymentsCount || 0,
-      });
+  const fetchStats = useCallback(
+    async (merchantId: string) => {
+      try {
+        const { count: linksCount } = await supabase
+          .from('payment_links')
+          .select('id', { count: 'exact', head: true })
+          .eq('merchant_id', merchantId);
+
+        const { data: transactions, count: paymentsCount } = await supabase
+          .from('transactions')
+          .select('id, amount, currency, created_at', { count: 'exact' })
+          .eq('merchant_id', merchantId)
+          .in('status', ['confirmed', 'finished'])
+          .order('created_at', { ascending: false });
+
+        const totalRevenue =
+          transactions?.reduce((sum, t) => sum + Number(t.amount || 0), 0) || 0;
+
+        setStats({
+          totalRevenue,
+          paymentLinks: linksCount || 0,
+          successfulPayments: paymentsCount || 0,
+        });
+
+        setRecentTransactions(
+          (transactions || []).slice(0, 5).map((t) => ({
+            id: t.id,
+            amount: Number(t.amount || 0),
+            currency: t.currency || 'USD',
+            created_at: t.created_at,
+          }))
+        );
+
+        // Fetch new payments since last seen
+        await fetchNewPayments(merchantId);
+      } catch (error) {
+        console.error('Failed to fetch stats:', error);
+      }
+    },
+    [fetchNewPayments]
+  );
 
-      setRecentTransactions(
-        (transactions || []).slice(0, 5).map(t => ({
-          id: t.id,
-          amount: Number(t.amount || 0),
-          currency: t.currency || 'USD',
-          created_at: t.created_at,
-        }))
-      );
-    } catch (error) {
-      console.error('Failed to fetch stats:', error);
+  const markPaymentsSeen = async () => {
+    try {
+      await fetch('/api/merchant/settings', {
+        method: 'PATCH',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify({ last_seen_payments_at: new Date().toISOString() })
+      });
+      setNewPayments([]);
+    } catch (err) {
+      console.error('Failed to mark payments as seen:', err);
     }
   };
 
   useEffect(() => {
     const getUser = async () => {
       try {
         const { data: { user }, error } = await supabase.auth.getUser();
         
         if (error || !user) {
           console.error('Authentication error:', error);
           router.push('/login');
           return;
         }
 
         // Ensure merchant record exists
         try {
           const response = await fetch('/api/merchants/create', {
             method: 'POST',
             headers: {
               'Content-Type': 'application/json',
             },
           });
 
           if (!response.ok) {
             console.error('Failed to create/verify merchant record');
diff --git a/app/merchant/dashboard/page.tsx b/app/merchant/dashboard/page.tsx
index 8938be4f01f87e1da821d0f2a790e30e3b426fdb..21bb97389a5300051199c4eb7fe57ae72b560010 100644
--- a/app/merchant/dashboard/page.tsx
+++ b/app/merchant/dashboard/page.tsx
@@ -163,51 +209,51 @@ export default function MerchantDashboard() {
         }
 
         setUser(user);
 
         const { data: merchantData, error: merchantErrorFetch } = await supabase
           .from('merchants')
           .select('id, wallets, trial_end')
           .eq('user_id', user.id)
           .single();
 
         if (merchantErrorFetch) {
           console.error('Failed to fetch merchant:', merchantErrorFetch);
         } else if (merchantData) {
           setMerchant(merchantData);
           await fetchStats(merchantData.id);
         }
       } catch (error) {
         console.error('Failed to get user:', error);
         router.push('/login');
       } finally {
         setLoading(false);
       }
     };
 
     getUser();
-  }, [router]);
+  }, [router, fetchStats]);
 
   useEffect(() => {
     if (!merchant) return;
     const baseCurrencies = Object.keys(merchant.wallets || {});
     const currencySet = new Set<string>();
     baseCurrencies.forEach((currency) => {
       currencySet.add(currency);
       (stableCoinAssociations[currency] || []).forEach((sc) => currencySet.add(sc));
     });
     const list = Array.from(currencySet).map((code) => ({
       symbol: code,
       name: CURRENCY_NAMES[code] || code,
     }));
     setSupportedCurrencies(list);
   }, [merchant]);
 
   const trialEnd = merchant?.trial_end || user?.user_metadata?.trial_end;
 
   const steps = [
     {
       id: 1,
       title: 'Create your first payment link',
       description: 'Set up a payment link with your desired amount and accepted cryptocurrencies.',
       completed: stats.paymentLinks > 0,
     },
diff --git a/app/merchant/dashboard/page.tsx b/app/merchant/dashboard/page.tsx
index 8938be4f01f87e1da821d0f2a790e30e3b426fdb..21bb97389a5300051199c4eb7fe57ae72b560010 100644
--- a/app/merchant/dashboard/page.tsx
+++ b/app/merchant/dashboard/page.tsx
@@ -269,50 +315,72 @@ export default function MerchantDashboard() {
               Welcome back, {businessName}!
             </h1>
             <p className="text-gray-600">
               Here&apos;s what&apos;s happening with your cryptocurrency payments today.
             </p>
           </div>
           <div className="flex gap-3">
             <Button 
               variant="outline" 
               onClick={() => router.push('/merchant/dashboard/payments')}
               className="flex items-center gap-2"
             >
               <LinkIcon className="h-4 w-4" />
               View All Links
             </Button>
             <Button 
               onClick={() => router.push('/merchant/dashboard/payments/create')}
               className="flex items-center gap-2"
             >
               <Plus className="h-4 w-4" />
               Create Payment Link
             </Button>
           </div>
         </div>
 
+        {newPayments.length > 0 && (
+          <Alert>
+            <AlertDescription>
+              <div className="flex items-center justify-between">
+                <span>
+                  You have {newPayments.length} new payment{newPayments.length > 1 ? 's' : ''}.
+                </span>
+                <Button size="sm" variant="outline" onClick={markPaymentsSeen}>
+                  Mark as seen
+                </Button>
+              </div>
+              <ul className="mt-2 list-disc pl-4">
+                {newPayments.map(p => (
+                  <li key={p.id}>
+                    {formatCurrency(p.amount, p.currency)} — {new Date(p.created_at).toLocaleString()}
+                  </li>
+                ))}
+              </ul>
+            </AlertDescription>
+          </Alert>
+        )}
+
         {/* Trial Banner */}
         {trialEnd && (
           <Card className="border-orange-200 bg-orange-50">
             <CardContent className="pt-6">
               <div className="flex items-center gap-3">
                 <Clock className="h-5 w-5 text-orange-600" />
                 <div>
                   <p className="font-medium text-orange-900">Free Trial Active</p>
                   <p className="text-sm text-orange-700">
                     Your trial ends on {new Date(trialEnd).toLocaleDateString()}. $99 One-time setup fee + $19/mo subscription will be charged to continue accepting crypto payments.
                   </p>
                 </div>
                 <div className="ml-auto flex items-center gap-4">
                   <span className="text-sm text-orange-700">Ends in {trialCountdown}</span>
                   <Link href="/merchant/settings" className="text-sm text-orange-700 underline">
                     Cancel Subscription
                   </Link>
                 </div>
               </div>
             </CardContent>
           </Card>
         )}
 
         {/* Stats Cards */}
         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
 
EOF
)