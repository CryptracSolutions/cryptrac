 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/app/api/nowpayments/create-payment/route.ts b/app/api/nowpayments/create-payment/route.ts
index d1a64c9dfaea32a64b30c47177bfb0943f0b7ef1..392491243ef00f0b6b5d299529d8eec60a86f181 100644
--- a/app/api/nowpayments/create-payment/route.ts
+++ b/app/api/nowpayments/create-payment/route.ts
@@ -160,115 +160,131 @@ export async function POST(request: NextRequest) {
       order_id,
       payment_link_id
     })
 
     // Validate required fields
     if (!price_amount || !price_currency || !pay_currency || !order_id || !payment_link_id) {
       return NextResponse.json(
         { 
           success: false, 
           error: 'Missing required fields' 
         },
         { status: 400 }
       )
     }
 
     // Get payment link and merchant info
     const { data: paymentLinkData, error: paymentLinkError } = await supabase
       .from('payment_links')
       .select(`
         *,
         merchants!inner(
           id,
           business_name,
           auto_convert_enabled,
           charge_customer_fee,
-          wallets
+          wallets,
+          preferred_payout_currency
         )
       `)
       .eq('id', payment_link_id)
       .single()
 
     if (paymentLinkError || !paymentLinkData) {
       console.error('‚ùå Payment link not found:', paymentLinkError)
       return NextResponse.json(
         { 
           success: false, 
           error: 'Payment link not found' 
         },
         { status: 404 }
       )
     }
 
     console.log('‚úÖ Payment link found:', {
       id: paymentLinkData.id,
       merchant_id: paymentLinkData.merchant_id
     })
 
-    const merchant = Array.isArray(paymentLinkData.merchants) 
-      ? paymentLinkData.merchants[0] 
+    const merchant = Array.isArray(paymentLinkData.merchants)
+      ? paymentLinkData.merchants[0]
       : paymentLinkData.merchants
 
+    const preferredPayoutCurrency =
+      paymentLinkData.preferred_payout_currency ||
+      merchant.preferred_payout_currency
+
+    const autoConvertEnabled =
+      paymentLinkData.auto_convert_enabled &&
+      !!preferredPayoutCurrency
+
     // Prepare payment request for NOWPayments
     const paymentRequest: any = {
       price_amount: parseFloat(price_amount.toString()),
       price_currency: price_currency.toLowerCase(),
       pay_currency: pay_currency.toLowerCase(),
       order_id: order_id,
       order_description: order_description || `Payment for ${merchant.business_name}`,
       ipn_callback_url: `${process.env.NEXT_PUBLIC_APP_URL}/api/webhooks/nowpayments`,
       success_url: `${process.env.NEXT_PUBLIC_APP_URL}/payment/success/${payment_link_id}`,
       cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/pay/${payment_link_id}`
     }
 
     // Enhanced auto-forwarding logic
     let autoForwardingConfigured = false
     const wallets = merchant.wallets || {}
-    
+
     console.log('üîç Available wallets:', Object.keys(wallets))
-    
-    if (merchant.auto_convert_enabled && Object.keys(wallets).length > 0) {
-      const walletKey = getWalletKeyForCurrency(pay_currency, wallets)
-      
+
+    if (autoConvertEnabled && preferredPayoutCurrency && Object.keys(wallets).length > 0) {
+      const walletKey = getWalletKeyForCurrency(preferredPayoutCurrency, wallets)
+
       if (walletKey && wallets[walletKey]) {
         const walletAddress = wallets[walletKey]
-        
-        console.log(`üîç Found wallet for ${pay_currency} using ${walletKey}: ${walletAddress.substring(0, 10)}...`)
-        
+
+        console.log(
+          `üîç Found wallet for ${preferredPayoutCurrency} using ${walletKey}: ${walletAddress.substring(0, 10)}...`
+        )
+
         // Validate wallet address format
-        if (isValidWalletAddress(walletAddress, pay_currency)) {
+        if (isValidWalletAddress(walletAddress, preferredPayoutCurrency)) {
           paymentRequest.payout_address = walletAddress
-          paymentRequest.payout_currency = pay_currency.toLowerCase()
-          // FIXED: Don't set payout_extra_id to null - omit it entirely
+          paymentRequest.payout_currency = preferredPayoutCurrency.toLowerCase()
           autoForwardingConfigured = true
-          
-          console.log(`‚úÖ Auto-forwarding configured for ${pay_currency}: ${walletAddress.substring(0, 10)}...`)
+
+          console.log(
+            `‚úÖ Auto-forwarding configured for ${preferredPayoutCurrency}: ${walletAddress.substring(0, 10)}...`
+          )
         } else {
-          console.warn(`‚ö†Ô∏è Invalid wallet address format for ${pay_currency}: ${walletAddress}`)
+          console.warn(
+            `‚ö†Ô∏è Invalid wallet address format for ${preferredPayoutCurrency}: ${walletAddress}`
+          )
         }
       } else {
-        console.warn(`‚ö†Ô∏è No wallet address found for ${pay_currency}`)
+        console.warn(
+          `‚ö†Ô∏è No wallet address found for preferred payout currency ${preferredPayoutCurrency}`
+        )
         console.log('Available wallet keys:', Object.keys(wallets))
       }
     }
 
     // Create payment with NOWPayments
     console.log('üì° Sending payment request to NOWPayments:')
     console.log('- price_amount:', paymentRequest.price_amount)
     console.log('- price_currency:', paymentRequest.price_currency)
     console.log('- pay_currency:', paymentRequest.pay_currency)
     console.log('- order_id:', paymentRequest.order_id)
     console.log('- auto_forwarding_enabled:', autoForwardingConfigured)
     if (autoForwardingConfigured) {
       console.log('- payout_address:', paymentRequest.payout_address?.substring(0, 10) + '...')
     }
 
     let paymentResponse
     let retryWithoutForwarding = false
 
     try {
       const response = await fetch(`${NOWPAYMENTS_BASE_URL}/payment`, {
         method: 'POST',
         headers: {
           'x-api-key': NOWPAYMENTS_API_KEY,
           'Content-Type': 'application/json',
         },
 
EOF
)