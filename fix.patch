 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/app/components/fee-documentation.tsx b/app/components/fee-documentation.tsx
index c85c193fa1ee5d38d406a1ade72c74a75cb87392..f9004c4d7a32ed3036e58e7907949b01d9968a78 100644
--- a/app/components/fee-documentation.tsx
+++ b/app/components/fee-documentation.tsx
@@ -56,51 +56,51 @@ export function FeeDocumentation({
               <h4 className="font-semibold text-blue-900">Understanding Payment Fees</h4>
             </div>
             
             <div className="grid gap-3 md:grid-cols-2">
               {showNetworkFees && (
                 <div className="space-y-1">
                   <div className="flex items-center gap-2">
                     <Network className="h-4 w-4 text-blue-500" />
                     <span className="font-medium text-sm">Network Fees</span>
                     <Badge variant="outline" className="text-xs">Variable</Badge>
                   </div>
                   <p className="text-xs text-gray-600">
                     Paid to blockchain miners/validators. Varies by network congestion and coin type.
                   </p>
                 </div>
               )}
               
               {showGatewayFees && (
                 <div className="space-y-1">
                   <div className="flex items-center gap-2">
                     <CreditCard className="h-4 w-4 text-green-500" />
                     <span className="font-medium text-sm">Gateway Fees</span>
                     <Badge variant="outline" className="text-xs">0.5% - 1%</Badge>
                   </div>
                   <p className="text-xs text-gray-600">
-                    Processing fee. You choose if customer or merchant pays.
+                    Gateway fee. You choose whether the customer or merchant pays.
                   </p>
                 </div>
               )}
             </div>
             
             <div className="bg-white p-2 rounded border border-blue-200">
               <p className="text-xs text-blue-700">
                 <CheckCircle className="h-3 w-3 inline mr-1" />
                   <strong>Cryptrac Revenue:</strong> Only the $19/month subscription. We don&apos;t earn from transaction fees.
               </p>
             </div>
           </div>
         </CardContent>
       </Card>
     )
   }
 
   // Full documentation
   return (
     <div className="space-y-6">
       <Card>
         <CardHeader>
           <CardTitle className="flex items-center gap-2">
             <DollarSign className="h-6 w-6 text-blue-600" />
             Understanding Payment Fees: Crypto vs. Traditional Processors
@@ -187,51 +187,51 @@ export function FeeDocumentation({
                       </ul>
                     </div>
 
                     <div className="bg-orange-100 p-3 rounded border border-orange-200">
                       <p className="text-sm text-orange-800">
                         <strong>Example:</strong> Some networks like Bitcoin and Ethereum have higher fees, 
                         while others like Solana, XRP, Tron, Base, or BNB are much lower.
                       </p>
                     </div>
                   </CardContent>
                 </Card>
               )}
 
               {/* Gateway Fees */}
               {showGatewayFees && (
                 <Card className="border-green-200 bg-green-50/50">
                   <CardHeader className="pb-3">
                     <CardTitle className="text-lg flex items-center gap-2">
                       <CreditCard className="h-5 w-5 text-green-600" />
                       Gateway Fees
                       <Badge variant="outline" className="bg-green-100 text-green-700">0.5% - 1%</Badge>
                     </CardTitle>
                   </CardHeader>
                   <CardContent className="space-y-3">
                     <p className="text-gray-700">
-                      Processing fee charged by the payment gateway for handling the transaction, 
+                      Gateway fee charged by the payment gateway for handling the transaction,
                       managing risk, and forwarding funds to your wallet.
                     </p>
                     
                     <div className="space-y-2">
                       <h4 className="font-medium text-gray-900">Gateway Fee Structure:</h4>
                       <div className="grid gap-2">
                         <div className="flex justify-between items-center p-2 bg-white rounded border">
                           <span className="text-sm">Direct Payments</span>
                           <Badge className="bg-green-100 text-green-700">0.5%</Badge>
                         </div>
                         <div className="flex justify-between items-center p-2 bg-white rounded border">
                           <span className="text-sm">Auto-Convert Payments</span>
                           <Badge className="bg-green-100 text-green-700">1.0%</Badge>
                         </div>
                       </div>
                     </div>
 
                     <div className="bg-green-100 p-3 rounded border border-green-200">
                       <p className="text-sm text-green-800">
                         <strong>Your Choice:</strong> You decide whether the customer pays this fee 
                         (added at checkout) or you absorb it (deducted from payout).
                       </p>
                     </div>
                   </CardContent>
                 </Card>
diff --git a/app/help/page.tsx b/app/help/page.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..61ffb6ac85d5c0bca8621777804d281818ed4be8
--- /dev/null
+++ b/app/help/page.tsx
@@ -0,0 +1,69 @@
+import Link from "next/link";
+import type { Metadata } from "next";
+
+export const metadata: Metadata = {
+  title: "Help & Support"
+};
+
+export default function HelpPage() {
+  return (
+    <div className="max-w-3xl mx-auto py-10 px-4 space-y-8">
+      <h1 className="text-3xl font-bold">Help &amp; Support</h1>
+
+      <section className="space-y-2">
+        <h2 className="text-2xl font-semibold">Refund Policy</h2>
+        <p>
+          Cryptrac does not handle refunds. Any refund or dispute is strictly
+          between you and your customer. Because payments are made directly
+          to your wallet, chargebacks are not possible.
+        </p>
+      </section>
+
+      <section className="space-y-2">
+        <h2 className="text-2xl font-semibold">Best Practice Recommendations</h2>
+        <ul className="list-disc pl-6 space-y-1">
+          <li>
+            <strong>For lowest cost and most transparency:</strong> receive the
+            same crypto your customer sends by keeping Auto-Convert off.
+          </li>
+          <li>
+            <strong>For price stability and simplified accounting:</strong> turn
+            Auto-Convert on to receive payments in your preferred stable coin.
+          </li>
+          <li>
+            <strong>Payment amount strategy:</strong> set a minimum payment
+            amount so network fees are a small percentage of each payment.
+          </li>
+          <li>
+            <strong>Review process:</strong> review payout details after each
+            payment for a full breakdown of all fees.
+          </li>
+        </ul>
+      </section>
+
+      <section className="space-y-2">
+        <h2 className="text-2xl font-semibold">FAQ</h2>
+        <p className="font-medium">
+          What fees will I pay, and which payout option is right for me?
+        </p>
+        <p>
+          If you want the lowest fees and are comfortable managing crypto,
+          choose Auto-Convert off. If you prefer to avoid price swings and want
+          all payments in one asset, enable Auto-Convertâ€”just remember the higher
+          fees are due to conversion spread, not Cryptrac revenue.
+        </p>
+      </section>
+
+      <p className="text-sm text-muted-foreground">
+        Need more help? Reach out to us at{' '}
+        <Link
+          href="mailto:support@cryptrac.com"
+          className="text-primary underline"
+        >
+          support@cryptrac.com
+        </Link>
+        .
+      </p>
+    </div>
+  );
+}
diff --git a/app/merchant/onboarding/steps/payment-config-step.tsx b/app/merchant/onboarding/steps/payment-config-step.tsx
index b3e6d83b12d4d06e94b02f9b4b1873ab022106ce..ebeca61fb01e42b56b271fd588c57f80031a71c9 100644
--- a/app/merchant/onboarding/steps/payment-config-step.tsx
+++ b/app/merchant/onboarding/steps/payment-config-step.tsx
@@ -237,51 +237,51 @@ export default function PaymentConfigStep({ data, walletConfig, onComplete, onPr
             )}
           </div>
 
           <Separator />
 
           {/* Fee Responsibility Setting */}
           <div className="space-y-4">
             <div className="flex items-center justify-between">
               <h3 className="text-lg font-semibold text-gray-900 flex items-center space-x-2">
                 <DollarSign className="w-5 h-5" />
                 <span>Gateway Fee Settings</span>
               </h3>
               <Button
                 variant="outline"
                 size="sm"
                 onClick={() => setShowFeeDetails(!showFeeDetails)}
                 className="text-blue-600 hover:text-blue-700"
               >
                 {showFeeDetails ? 'Hide' : 'Learn More'} About Fees
               </Button>
             </div>
             
             <Alert className="border-blue-200 bg-blue-50">
               <Info className="h-4 w-4 text-blue-600" />
               <AlertDescription className="text-blue-800">
-                <strong>Gateway Fee Responsibility:</strong> Choose who pays the gateway processing fees.
+                <strong>Gateway Fee Responsibility:</strong> Choose who pays the gateway fee.
                 This setting can be overridden for individual payment links.
               </AlertDescription>
             </Alert>
 
             <div className="space-y-3">
               <div className="flex items-start space-x-3">
                 <Checkbox
                   checked={!formData.chargeCustomerFee}
                   onCheckedChange={(checked) => 
                     setFormData(prev => ({ 
                       ...prev, 
                       chargeCustomerFee: !checked 
                     }))
                   }
                 />
                 <div className="flex-1">
                   <div className="font-medium text-gray-900">Merchant pays gateway fee</div>
                   <div className="text-sm text-gray-600">
                     You absorb the gateway fee. Customers pay the exact amount shown.
                   </div>
                   <div className="text-xs text-green-600 mt-1">
                     âœ“ Better customer experience - no surprise fees
                   </div>
                 </div>
               </div>
diff --git a/app/page.tsx b/app/page.tsx
index 272af3247ba9b7e2753287ececc372054ce7a975..39cb70c05a0b88cb53e66368b0f4fc937fa9c334 100644
--- a/app/page.tsx
+++ b/app/page.tsx
@@ -43,51 +43,51 @@ export default function Home() {
   ];
 
   const supportedCryptos = [
     { symbol: "BTC", name: "Bitcoin" },
     { symbol: "ETH", name: "Ethereum" },
     { symbol: "LTC", name: "Litecoin" },
     { symbol: "ADA", name: "Cardano" },
     { symbol: "DOT", name: "Polkadot" },
     { symbol: "USDT", name: "Tether" }
   ];
 
   const benefits = [
     "30-day free trial",
     "No transaction fees to Cryptrac",
     "Gateway fees: 0.5% (direct) or 1% (auto-convert)",
     "Non-custodial security",
     "Real-time notifications",
     "Mobile-friendly interface",
     "Comprehensive analytics",
     "Multi-currency support"
   ];
 
   const faqItems = [
     {
       question: "What does Cryptrac cost?",
-      answer: "Cryptrac charges $19/month (or $199/year) for platform access. We don't take any transaction fees - you only pay gateway processing fees (0.5% for direct payments, 1% for auto-convert) which go to the payment processor, not to Cryptrac."
+      answer: "Cryptrac charges $19/month (or $199/year) for platform access. We don't take any transaction fees - you only pay gateway fees (0.5% for direct payments, 1% for auto-convert) which go to the payment processor, not to Cryptrac."
     },
     {
       question: "Are there any hidden fees?",
       answer: "Absolutely not. Our pricing is completely transparent: $19/month subscription + gateway fees (0.5% or 1%). Network fees may apply depending on the cryptocurrency and blockchain congestion, but these are blockchain costs, not Cryptrac fees."
     },
     {
       question: "How do gateway fees work?",
       answer: "Gateway fees are charged by the payment processor (not Cryptrac) for handling transactions. You can choose whether you or your customers pay these fees. Direct payments: 0.5%, Auto-convert payments: 1%."
     },
     {
       question: "Why is crypto cheaper than credit cards?",
       answer: "Traditional processors like Stripe charge 2.9% + $0.30 per transaction. Crypto gateway fees are typically 0.5-1% with no fixed fees, making them cheaper for most transaction sizes, especially larger payments."
     }
   ];
 
   return (
     <div className="min-h-screen bg-background">
       {/* Header */}
       <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
         <div className="container-wide flex h-16 items-center justify-between">
           <Logo size="md" />
           <nav className="hidden md:flex items-center space-x-6">
             <Link href="#features" className="text-sm font-medium text-muted-foreground hover:text-foreground">
               Features
             </Link>
diff --git a/app/pay/[id]/page.tsx b/app/pay/[id]/page.tsx
index 0beb92bbeddda6b9798f479d053cc43f0d90dbea..46b9948b7592a60282d900fa2cc2e46ee45b2163 100644
--- a/app/pay/[id]/page.tsx
+++ b/app/pay/[id]/page.tsx
@@ -1014,51 +1014,51 @@ export default function PaymentPage() {
                   <span className="font-medium">${feeBreakdown.baseAmount.toFixed(2)} {paymentLink.currency.toUpperCase()}</span>
                 </div>
                 
                 {paymentLink.tax_enabled && feeBreakdown.taxAmount > 0 && (
                   <>
                     {paymentLink.tax_rates.map((rate, index) => (
                       <div key={index} className="flex justify-between text-sm">
                         <span className="text-gray-600">{rate.label} ({rate.percentage}%):</span>
                         <span>${(feeBreakdown.baseAmount * (rate.percentage / 100)).toFixed(2)}</span>
                       </div>
                     ))}
                     <div className="flex justify-between">
                       <span className="text-gray-600">Tax Total:</span>
                       <span>${feeBreakdown.taxAmount.toFixed(2)}</span>
                     </div>
                     <Separator />
                     <div className="flex justify-between">
                       <span className="text-gray-600">Subtotal with Tax:</span>
                       <span className="font-medium">${feeBreakdown.subtotalWithTax.toFixed(2)}</span>
                     </div>
                   </>
                 )}
                 
                 {feeBreakdown.platformFee > 0 && (
                   <div className="flex justify-between text-sm">
-                    <span className="text-gray-600">Processing Fee ({paymentLink.fee_percentage}%):</span>
+                    <span className="text-gray-600">Gateway Fee ({(paymentLink.fee_percentage * 100).toLocaleString(undefined, { maximumFractionDigits: 3, minimumFractionDigits: 0 })}%):</span>
                     <span>${feeBreakdown.platformFee.toFixed(2)}</span>
                   </div>
                 )}
                 
                 <Separator />
                 <div className="flex justify-between text-lg font-bold">
                   <span>Total Amount:</span>
                   <span>${feeBreakdown.customerTotal.toFixed(2)} {paymentLink.currency.toUpperCase()}</span>
                 </div>
               </div>
             )}
           </CardContent>
         </Card>
 
         {!paymentData ? (
           /* Currency Selection */
           <Card>
             <CardHeader>
               <CardTitle>Select Payment Method</CardTitle>
             </CardHeader>
             <CardContent className="space-y-4">
               {availableCurrencies.length === 0 ? (
                 <div className="text-center py-8">
                   <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
                   <p className="text-gray-600">Loading available currencies...</p>
diff --git a/app/signup/page.tsx b/app/signup/page.tsx
index 95679039e55f5556860d6357ef9005e5d8985614..69a9ad5184acab38fa068ad7c654bff8eef69cdc 100644
--- a/app/signup/page.tsx
+++ b/app/signup/page.tsx
@@ -1,86 +1,84 @@
 'use client';
 
 import { useState } from 'react';
 import { useRouter } from 'next/navigation';
 import Link from 'next/link';
 import { toast } from 'react-hot-toast';
-import { Eye, EyeOff, Mail, Lock, Building } from 'lucide-react';
+import { Eye, EyeOff, Mail, Lock } from 'lucide-react';
 import { Button } from '@/app/components/ui/button';
 import { Input } from '@/app/components/ui/input';
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/app/components/ui/card';
 import { Badge } from '@/app/components/ui/badge';
 import { Logo } from '@/app/components/ui/logo';
 import { createClient } from '@/lib/supabase-browser';
 
 export default function Signup() {
   const [email, setEmail] = useState('');
   const [password, setPassword] = useState('');
-  const [businessName, setBusinessName] = useState('');
   const [showPassword, setShowPassword] = useState(false);
   const [loading, setLoading] = useState(false);
   const router = useRouter();
   const supabase = createClient();
 
   const handleSignup = async (e: React.FormEvent) => {
     e.preventDefault();
     setLoading(true);
 
-    if (!email || !password || !businessName) {
+    if (!email || !password) {
       toast.error('Please fill in all fields');
       setLoading(false);
       return;
     }
 
     if (password.length < 6) {
       toast.error('Password must be at least 6 characters');
       setLoading(false);
       return;
     }
 
     try {
       // Get country from IP
       let country = 'US';
       try {
         const ipResponse = await fetch('https://ipapi.co/json/' );
         const ipData = await ipResponse.json();
         country = ipData.country_code || 'US';
       } catch (ipError) {
         console.warn('Could not detect country:', ipError);
       }
 
       // Calculate trial end date (30 days from now)
       const trialEnd = new Date();
       trialEnd.setDate(trialEnd.getDate() + 30);
 
       const { data, error } = await supabase.auth.signUp({
         email,
         password,
         options: {
           data: {
             role: 'merchant',
-            business_name: businessName,
             country: country,
             trial_end: trialEnd.toISOString(),
             onboarded: false,
             setup_paid: false,
           }
         }
       });
 
       if (error) {
         toast.error(error.message);
         console.error('Signup error:', error);
         setLoading(false);
         return;
       }
 
       if (data.user) {
         toast.success('Account created successfully! Welcome to Cryptrac!');
         console.log('User created:', data.user);
         
         // Redirect to onboarding wizard for new users
         router.push('/merchant/onboarding');
       } else {
         toast.error('Account creation failed');
         setLoading(false);
       }
@@ -98,61 +96,50 @@ export default function Signup() {
         <div className="text-center">
           <div className="flex justify-center mb-6">
             <Logo size="lg" />
           </div>
           <h1 className="text-3xl font-bold text-gray-900">Get started with Cryptrac</h1>
           <p className="mt-2 text-gray-600">
             Accept crypto payments in minutes
           </p>
           <div className="flex justify-center mt-4">
             <Badge variant="success" className="text-xs">
               30-day free trial
             </Badge>
           </div>
         </div>
 
         {/* Signup Form */}
         <Card className="shadow-xl border-0">
           <CardHeader className="space-y-1 pb-6">
             <CardTitle className="text-2xl text-center">Create account</CardTitle>
             <CardDescription className="text-center">
               $19/month or $199/year after trial
             </CardDescription>
           </CardHeader>
           <CardContent>
             <form onSubmit={handleSignup} className="space-y-4">
-              <Input
-                type="text"
-                value={businessName}
-                onChange={(e) => setBusinessName(e.target.value)}
-                placeholder="Enter your business name"
-                label="Business Name"
-                leftIcon={<Building className="h-4 w-4" />}
-                disabled={loading}
-                required
-              />
-
               <Input
                 type="email"
                 value={email}
                 onChange={(e) => setEmail(e.target.value)}
                 placeholder="Enter your email"
                 label="Email"
                 leftIcon={<Mail className="h-4 w-4" />}
                 autoComplete="email"
                 disabled={loading}
                 required
               />
               
               <Input
                 type={showPassword ? "text" : "password"}
                 value={password}
                 onChange={(e) => setPassword(e.target.value)}
                 placeholder="Create a strong password"
                 label="Password"
                 leftIcon={<Lock className="h-4 w-4" />}
                 rightIcon={
                   <button
                     type="button"
                     onClick={() => setShowPassword(!showPassword)}
                     className="text-muted-foreground hover:text-foreground"
                   >
 
EOF
)