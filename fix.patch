 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/app/api/terminal/invoice/route.ts b/app/api/terminal/invoice/route.ts
index 5fa7b280fdf570224efafa0a05540cd7916bbd56..f7d5b5c5d57e53204e02de56019982cce0e28337 100644
--- a/app/api/terminal/invoice/route.ts
+++ b/app/api/terminal/invoice/route.ts
@@ -77,51 +77,51 @@ function generateLinkId(): string {
   }
   return result;
 }
 
 async function getMerchant(request: NextRequest) {
   const authHeader = request.headers.get('Authorization');
   if (!authHeader || !authHeader.startsWith('Bearer ')) {
     return { error: 'Missing or invalid Authorization header' };
   }
   const token = authHeader.substring(7);
   const supabase = createClient(
     process.env.NEXT_PUBLIC_SUPABASE_URL!,
     process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
   );
   const { data: { user }, error } = await supabase.auth.getUser(token);
   if (error || !user) return { error: 'Unauthorized' };
   const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
   if (!serviceKey) return { error: 'Server misconfigured' };
   const service = createClient(
     process.env.NEXT_PUBLIC_SUPABASE_URL!,
     serviceKey,
     { auth: { autoRefreshToken: false, persistSession: false } }
   );
   const { data: merchant, error: merchantError } = await service
     .from('merchants')
-    .select('id, wallets, charge_customer_fee, auto_convert_enabled, tax_enabled, tax_rates')
+    .select('id, wallets, charge_customer_fee, auto_convert_enabled, tax_enabled, tax_rates, preferred_payout_currency')
     .eq('user_id', user.id)
     .single();
   if (merchantError || !merchant) return { error: 'Merchant account not found' };
   return { service, merchant };
 }
 
 export async function POST(request: NextRequest) {
   const auth = await getMerchant(request);
   if ('error' in auth) {
     return NextResponse.json({ error: auth.error }, { status: 401 });
   }
   const { service, merchant } = auth;
   const body = await request.json();
   const { amount, tip_amount = 0, pay_currency, pos_device_id, tax_enabled, charge_customer_fee } = body;
   if (!amount || !pay_currency || !pos_device_id) {
     return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
   }
   const amountNum = parseFloat(amount);
   const tipNum = parseFloat(tip_amount) || 0;
   if (isNaN(amountNum) || amountNum <= 0) {
     return NextResponse.json({ error: 'Invalid amount' }, { status: 400 });
   }
   if (tipNum < 0) {
     return NextResponse.json({ error: 'Invalid tip amount' }, { status: 400 });
   }
 
EOF
)