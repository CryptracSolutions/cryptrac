 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/app/api/internal/payments/create/route.ts b/app/api/internal/payments/create/route.ts
index 9cc1da5b38faae2e321f999c3e5a12886787727b..841a28671c2506164f4e33e1a3d2050c349471af 100644
--- a/app/api/internal/payments/create/route.ts
+++ b/app/api/internal/payments/create/route.ts
@@ -72,51 +72,51 @@ export async function POST(request: NextRequest) {
   const feeAmount = subtotalWithTax * totalFeePercentage;
   const customerPaysTotal = effectiveChargeCustomerFee ? subtotalWithTax + feeAmount : subtotalWithTax;
   const merchantReceives = effectiveChargeCustomerFee ? subtotalWithTax : subtotalWithTax - feeAmount;
   const linkId = generateLinkId();
   const paymentUrl = `${process.env.NEXT_PUBLIC_APP_URL}/pay/${linkId}`;
   const insert: Record<string, unknown> = {
     merchant_id,
     title,
     description,
     amount: amountNum,
     base_amount: amountNum,
     currency,
     accepted_cryptos,
     link_id: linkId,
     qr_code_data: paymentUrl,
     expires_at: expires_at ? new Date(expires_at).toISOString() : null,
     max_uses: max_uses || null,
     status: 'active',
     charge_customer_fee: effectiveChargeCustomerFee,
     auto_convert_enabled: effectiveAutoConvertEnabled,
     preferred_payout_currency: effectivePreferredPayoutCurrency,
     fee_percentage: totalFeePercentage,
     tax_enabled,
     tax_rates: tax_enabled ? tax_rates : [],
     tax_amount: totalTaxAmount,
-    subtotal_with_tax,
+    subtotal_with_tax: subtotalWithTax,
     metadata: {
       ...metadata,
       fee_breakdown: {
         base_fee_percentage: baseFeePercentage * 100,
         auto_convert_fee_percentage: autoConvertFeePercentage * 100,
         total_fee_percentage: totalFeePercentage * 100,
         fee_amount,
         merchant_receives: merchantReceives,
         effective_charge_customer_fee: effectiveChargeCustomerFee,
         effective_auto_convert_enabled: effectiveAutoConvertEnabled,
         effective_preferred_payout_currency: effectivePreferredPayoutCurrency
       },
       tax_breakdown: taxBreakdown,
       wallet_addresses: Object.fromEntries(
         accepted_cryptos.map((c: string) => [c, merchantWallets[c]])
       )
     }
   };
   if (source) insert.source = source;
   if (subscription_id) insert.subscription_id = subscription_id;
   if (pos_device_id) insert.pos_device_id = pos_device_id;
   const { data: paymentLink, error: insertError } = await supabase
     .from('payment_links')
     .insert(insert)
     .select()
 
EOF
)