import { NextResponse } from 'next/server';
import { getSupportedCurrencies } from '@/lib/currency-service';

// Our approved list (from the page component)
const APPROVED_CURRENCIES = {
  '1INCH': '1inch Network',
  'AAVE': 'Aave',
  'ALGO': 'Algorand',
  'APT': 'Aptos',
  'ARB': 'Arbitrum',
  'ARV': 'Ariva',
  'ARK': 'Ark',
  'AVAXC': 'Avalanche',
  'AVAX': 'AVAX',
  'AXS': 'Axie Infinity',
  'BABYDOGE': 'Baby Doge Coin',
  'BAT': 'Basic Attention Token',
  'BAZED': 'Bazed Games',
  'BEAM': 'Beam',
  'BERA': 'Berachain',
  'BNB': 'Binance Coin',
  'BUSD': 'Binance USD',
  'BUSDBSC': 'Binance USD',
  'BUSDMATIC': 'Binance USD',
  'BTC': 'Bitcoin',
  'BCH': 'Bitcoin Cash',
  'BRETTBASE': 'Brett',
  'CAKE': 'CAKE',
  'ADA': 'Cardano',
  'CSPR': 'Casper',
  'LINK': 'Chainlink',
  'CSWAP': 'ChainSwap',
  'CHZ': 'Chiliz',
  'CFX': 'Conflux',
  'CFXMAINNET': 'Conflux',
  'ATOM': 'Cosmos',
  'COTI': 'COTI',
  'CRO': 'Cronos',
  'CROMAINNET': 'Cronos',
  'DAI': 'DAI',
  'DASH': 'Dash',
  'MANA': 'Decentraland',
  'DOGE': 'Dogecoin',
  'ENJ': 'Enjin Coin',
  'ETH': 'Ethereum',
  'ETHARB': 'Ethereum',
  'ETHBASE': 'Ethereum',
  'ETC': 'Ethereum Classic',
  'FTM': 'Fantom',
  'FTMMAINNET': 'Fantom',
  'FIL': 'Filecoin',
  'FLOKI': 'Floki',
  'FRONT': 'Frontier',
  'FTT': 'FTT',
  'FUN': 'FUNToken',
  'GALAERC20': 'GALAERC20',
  'ONE': 'Harmony',
  'HBAR': 'Hedera Hashgraph',
  'HEX': 'Hex',
  'HYPE': 'Hyperliquid',
  'ILV': 'Illuvium',
  'INJERC20': 'Injective',
  'INJMAINNET': 'Injective Protocol',
  'INJ': 'Injective Protocol',
  'IOTA': 'IOTA',
  'IOTX': 'IOTX',
  'JASMY': 'JasmyCoin',
  'JETTON': 'JetTon Games',
  'KAIA': 'Kaia',
  'KAS': 'Kaspa',
  'KMD': 'Komodo',
  'KNC': 'Kyber Network Crystal',
  'ZROARB': 'LayerZero',
  'ZRO': 'LayerZero',
  'LGCY': 'LGCY Network',
  'LTC': 'Litecoin',
  'XMR': 'Monero',
  'MYRO': 'Myro',
  'NANO': 'Nano',
  'NEAR': 'Near',
  'NEO': 'NEO',
  'NOT': 'Notcoin',
  'OCEAN': 'Ocean Protocol',
  'TRUMP': 'OFFICIAL TRUMP',
  'OKB': 'OKB',
  'OMG': 'OMG Network',
  'PYUSD': 'PayPal USD',
  'PEPE': 'Pepe',
  'DOT': 'Polkadot',
  'MATICMAINNET': 'Polygon',
  'PLS': 'Pulsechain',
  'RVN': 'Ravencoin',
  'XRP': 'Ripple',
  'SEI': 'Sei',
  'SHIB': 'Shiba Inu',
  'SOL': 'Solana',
  'STX': 'Stacks',
  'STRKMAINNET': 'Starknet',
  'XLM': 'Stellar',
  'STRAX': 'Stratis',
  'SUI': 'Sui',
  'SUPER': 'SUPER',
  'TET': 'Tectum',
  'TENSHI': 'Tenshi',
  'LUNA': 'Terra',
  'LUNC': 'Terra Classic',
  'USDTARB': 'Tether',
  'USDTARC20': 'Tether',
  'USDTOP': 'Tether',
  'USDTALGO': 'Tether USD',
  'USDTBSC': 'Tether USD',
  'USDTCELO': 'Tether USD',
  'USDTEOS': 'Tether USD',
  'USDTERC20': 'Tether USD',
  'USDTKAVA': 'Tether USD',
  'USDTNEAR': 'Tether USD',
  'USDTMATIC': 'Tether USD',
  'USDTSOL': 'Tether USD',
  'USDTXTZ': 'Tether USD',
  'USDTTON': 'Tether USD',
  'USDTTRC20': 'Tether USD',
  'USDTDOT': 'Tether',
  'XTZ': 'Tezos',
  'GRT': 'The Graph',
  'THETA': 'THETA',
  'RUNE': 'THORChain',
  'TON': 'Toncoin',
  'TRX': 'Tron',
  'TUSDTRC20': 'TrueUSD',
  'UNI': 'Uniswap',
  'USDCALGO': 'USD Coin',
  'USDCARC20': 'USD Coin',
  'USDCBASE': 'USD Coin',
  'USDCBSC': 'USD Coin',
  'USDC': 'USD Coin',
  'USDCKCC': 'USD Coin',
  'USDCOP': 'USD Coin',
  'USDCMATIC': 'USD Coin',
  'USDCSOL': 'USD Coin',
  'USDCARB': 'USD Coin',
  'OPUSDCE': 'USD Coin',
  'MATICUSDCE': 'USD Coin',
  'USDCXLM': 'USDC',
  'VET': 'VeChain',
  'VLX': 'Velas',
  'VELO': 'Velo',
  'VERSE': 'Verse',
  'WAVES': 'Waves',
  'WBTCMATIC': 'Wrapped Bitcoin (Polygon)',
  'XDC': 'XDC Network',
  'XYO': 'XYO Network',
  'YFI': 'yearn.finance',
  'ZBC': 'Zebec Protocol',
  'ZK': 'zkSync',
  'ZROERC20': 'LayerZero (Ethereum)'
};

export async function GET() {
  try {
    // Get currencies from API
    const apiCurrencies = await getSupportedCurrencies();
    
    const approvedCodes = Object.keys(APPROVED_CURRENCIES);
    const apiCodes = apiCurrencies.map(c => c.code);
    
    // Find approved currencies not in API
    const missingFromAPI = approvedCodes.filter(code => !apiCodes.includes(code));
    
    // Find approved currencies that ARE in API
    const foundInAPI = approvedCodes.filter(code => apiCodes.includes(code));
    
    return NextResponse.json({
      success: true,
      approved_count: approvedCodes.length,
      api_count: apiCurrencies.length,
      found_in_api_count: foundInAPI.length,
      missing_from_api: missingFromAPI,
      found_in_api: foundInAPI.sort(),
      all_api_codes: apiCodes.sort()
    });

  } catch (error) {
    console.error('Error in currency comparison:', error);
    return NextResponse.json(
      { 
        success: false,
        error: 'Failed to compare currencies',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}